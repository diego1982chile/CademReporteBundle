{% extends '::base.html.twig' %}

{% block title %}Cadem Analytics{% endblock %}

{% block filtro %}
	<!-- <form id="filtros" action="" method="post" >
		{% for form in forms %}
				{{ form_widget(form) }}
		{% endfor %}
		<input class="btn btn-primary" type="submit" value="Filtrar" />
	</form> -->
	<form style="margin:5px" id="form_variable_map">
		<label class="radio inline">
			Variable:
			<select style="width:auto;margin:0" id="variable_map" name="variable_map" required="required">
				{% for v in variables %}
				    <option value="{{v}}">{{v}}</option>
				{% endfor %}
			</select>
		</label>
	</form>
	<div id="map" style="height: 650px"></div>
{% endblock %}

{% block body %}
		<div class="span9">
			<div class="container-fluid well" style="padding-top:0">
				<h4>{{estudios[0].getNombre}}</h4>
				<div class="hero-unit" style="padding:15px;margin-bottom:10px">
					<div class="row-fluid">
					{% for ev in estudios[0].getEstudiovariables %}
						<div class="span3">
							
							<div id="i_{{ev.getVariable.getNombre}}" style="height: 200px;"></div>
							
						</div>
					{% endfor %}
					</div>
				</div>
				{#% for ev in estudios[0].getEstudiovariables %#}
				<div class="hero-unit" style="padding:15px;margin-bottom:10px">
					<div id="{% if "QUIEBRE" in variables %}evo_QUIEBRE{% else %}evo_PRESENCIA{% endif %}" style="min-width: 250px; height: 300px; margin: 0 auto"></div>
				</div>
				{#% endfor %#}						
			</div>												
			<div class="row-fluid">
		{% for n in noticias %}
			<div class="span6 well">

{% set t = 
n.titulo~"
========================="%}
			{{ t  | rst2html | raw}}
			{{ n.cuerpo | rst2html | raw}}

			<!--  <p><a class="btn" href="#">Ver detalles &raquo;</a></p> -->
			</div>
		{% endfor %}			
          </div><!--/row-->
		  
        </div><!--/span-->		
{% endblock %}

{% block stylesheets %}
	<link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet-0.6.3/leaflet.css" />
	<link rel="stylesheet" href="{{ asset('bundles/cademreporte/css/Control.FullScreen.css') }}" />
{% endblock %}

{% block customstyles %}
	.leaflet-cluster-anim .leaflet-marker-icon, .leaflet-cluster-anim .leaflet-marker-shadow {
		-webkit-transition: -webkit-transform 0.2s ease-out, opacity 0.2s ease-in;
		-moz-transition: -moz-transform 0.2s ease-out, opacity 0.2s ease-in;
		-o-transition: -o-transform 0.2s ease-out, opacity 0.2s ease-in;
		transition: transform 0.2s ease-out, opacity 0.2s ease-in;
	}

	.marker-cluster-small {
		background-color: rgba(181, 226, 140, 0.6);
	}
	.marker-cluster-small div {
		background-color: rgba(110, 204, 57, 0.6);
	}

	.marker-cluster-medium {
		background-color: rgba(241, 211, 87, 0.6);
	}
	.marker-cluster-medium div {
		background-color: rgba(240, 194, 12, 0.6);
	}

	.marker-cluster-large {
		background-color: rgba(253, 156, 115, 0.6);
	}
	.marker-cluster-large div {
		background-color: rgba(241, 128, 23, 0.6);
	}

	.marker-cluster {
		background-clip: padding-box;
		border-radius: 20px;
	}
	.marker-cluster div {
		width: 30px;
		height: 30px;
		margin-left: 5px;
		margin-top: 5px;

		text-align: center;
		border-radius: 15px;
		font: 12px "Helvetica Neue", Arial, Helvetica, sans-serif;
	}
	.marker-cluster span {
		line-height: 30px;
	}

{% endblock %}


{% block javascripts %}
<script src="{{ asset('bundles/cademreporte/js/highcharts.regression.js') }}"></script>
<script src="{{ asset('bundles/cademreporte/js/highcharts-more.js') }}"></script>
<script src="http://cdn.leafletjs.com/leaflet-0.6.4/leaflet.js"></script>
<script src="{{ asset('bundles/cademreporte/js/leaflet.markercluster.js') }}"></script>
<script src="{{ asset('bundles/cademreporte/js/Control.FullScreen.js') }}"></script>
<script>
{% for ev in estudios[0].getEstudiovariables %}
{{"var i_"~ev.getVariable.getNombre~";"}}
{{"var evo_"~ev.getVariable.getNombre~";"}}
{% endfor %}

$(document).ready(function () {
	
	{% for ev in estudios[0].getEstudiovariables %}//COMIENZA FOR
	
		{% if ev.getVariable.getNombre == "QUIEBRE" or ev.getVariable.getNombre == "PRESENCIA"  %}
		
		{{"i_"~ev.getVariable.getNombre}} = new Highcharts.Chart({
			chart: {
				type: 'gauge',
				plotBackgroundColor: null,
				plotBackgroundImage: null,
				plotBorderWidth: 0,
				plotShadow: false,
				renderTo: '{{"i_"~ev.getVariable.getNombre}}'
			},
			
			title: {
				text: '{{ev.getNombrevariable}}'
			},
			
			pane: {
				startAngle: -150,
				endAngle: 150,
				background: [{
					backgroundColor: {
						linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 },
						stops: [
							[0, '#FFF'],
							[1, '#333']
						]
					},
					borderWidth: 0,
					outerRadius: '109%'
				}, {
					backgroundColor: {
						linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 },
						stops: [
							[0, '#333'],
							[1, '#FFF']
						]
					},
					borderWidth: 1,
					outerRadius: '107%'
				}, {
					// default background
				}, {
					backgroundColor: '#DDD',
					borderWidth: 0,
					outerRadius: '105%',
					innerRadius: '103%'
				}]
			},
			   
			// the value axis
			yAxis: {
				min: 0,
				max: 100,
				
				minorTickInterval: 'auto',
				minorTickWidth: 1,
				minorTickLength: 10,
				minorTickPosition: 'inside',
				minorTickColor: '#666',
		
				tickPixelInterval: 30,
				tickWidth: 2,
				tickPosition: 'inside',
				tickLength: 10,
				tickColor: '#666',
				labels: {
					step: 2,
					rotation: 'auto'
				},
				title: {
					text: '%',
					y: 15
				},
				plotBands: [{
					from: 0,
					to: {{ indicadores.rango_quiebre }},
					innerRadius: '95%',
					{% if "QUIEBRE" in variables %}
					color: '#55BF3B' // green
					{% else %}
					color: '#DF5353' // red
					{% endif %}
					
				}, {
				// 	from: 30,
				// 	to: 70,
				// 	innerRadius: '95%',
				// 	color: '#DDDF0D' // yellow
				// }, {
					from: {{ indicadores.rango_quiebre }},
					to: 100,
					innerRadius: '95%',
					{% if "QUIEBRE" in variables %}
					color: '#DF5353' // red
					{% else %}
					color: '#55BF3B' // green
					{% endif %}
					
				}]        
			},
		
			series: [{
				name: '{{ev.getVariable.getNombre}}',
				data: [{{attribute(indicadores,ev.getVariable.getNombre)|number_format(1)}}],
				tooltip: {
					valueSuffix: ' %'
				},
				dataLabels: {
					formatter: function () {
						return  this.y.toString().replace(".",",");
					}
				}
			}],
			credits: {
					enabled: false
				}
		});
		
		{% endif %}


		{% if ev.getVariable.getNombre == "PRECIO"  %}
		
		{{"i_"~ev.getVariable.getNombre}} = new Highcharts.Chart({
			chart: {
				type: 'gauge',
				plotBackgroundColor: null,
				plotBackgroundImage: null,
				plotBorderWidth: 0,
				plotShadow: false,
				renderTo: '{{"i_"~ev.getVariable.getNombre}}'
			},
			
			title: {
				text: '{% if prefixe_tag_variable is defined %} {{prefixe_tag_variable}}{% endif %} {{ev.getNombrevariable}}'
			},
			
			pane: {
				startAngle: -150,
				endAngle: 150,
				background: [{
					backgroundColor: {
						linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 },
						stops: [
							[0, '#FFF'],
							[1, '#333']
						]
					},
					borderWidth: 0,
					outerRadius: '109%'
				}, {
					backgroundColor: {
						linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 },
						stops: [
							[0, '#333'],
							[1, '#FFF']
						]
					},
					borderWidth: 1,
					outerRadius: '107%'
				}, {
					// default background
				}, {
					backgroundColor: '#DDD',
					borderWidth: 0,
					outerRadius: '105%',
					innerRadius: '103%'
				}]
			},
			   
			// the value axis
			yAxis: {
				min: 0,
				max: 100,
				
				minorTickInterval: 'auto',
				minorTickWidth: 1,
				minorTickLength: 10,
				minorTickPosition: 'inside',
				minorTickColor: '#666',
		
				tickPixelInterval: 30,
				tickWidth: 2,
				tickPosition: 'inside',
				tickLength: 10,
				tickColor: '#666',
				labels: {
					step: 2,
					rotation: 'auto'
				},
				title: {
					text: '%',
					y: 15
				},
				plotBands: [{
					from: 0,
					to: {{ indicadores.rango_precio }},
					innerRadius: '95%',
					color: '#55BF3B' // green
				}, {
				// 	from: 30,
				// 	to: 70,
				// 	innerRadius: '95%',
				// 	color: '#DDDF0D' // yellow
				// }, {
					from: {{ indicadores.rango_precio }},
					to: 100,
					innerRadius: '95%',
					color: '#DF5353' // red
				}]        
			},
		
			series: [{
				name: "{{ev.getVariable.getNombre}}",
				data: [{{attribute(indicadores,ev.getVariable.getNombre)|number_format(1)}}],
				tooltip: {
					valueSuffix: ' %'
				},
				dataLabels: {
					formatter: function () {
						return  this.y.toString().replace(".",",");	
					}
				}
			}],
			credits: {
					enabled: false
				}
		});
		
		{% endif %}
		
	{% endfor %}//TERMINA FOR

	
	$.get( "{{ path('dashboard_indicadores') }}", $('form#filtros').serialize(), function(data) {
		
		{% if "QUIEBRE" in variables or "PRESENCIA" in variables %}
			{% if "QUIEBRE" in variables %}
				{% set nombrevar =  "QUIEBRE" %}
			{% else %}
			    {% set nombrevar = "PRESENCIA" %}
			{% endif %}
									
			{{"evo_"~nombrevar}} = new Highcharts.Chart({
				chart: {
					zoomType: 'x',
					renderTo: '{{"evo_"~nombrevar}}'
				},
				title: {
					text: 'Gráfico Evolutivo'
				},
				xAxis: {
					categories: data.evolutivo.mediciones
				},
				yAxis: [{
					title: {
						text: 'Promedio {{nombrevar|lower}}',
						style: {
							color: '#4572A7'
						}
					}
				}
				{% if "PRECIO" in variables %}
				,
				{
					title: {
						text: 'Incumplimiento Precio',
						style: {
							color: 'red'
						}
					},
					opposite: true
				}
				{% endif %}
				],
				tooltip: {
					// shared: true,
					formatter: function() {
						return 'Medición: <b>'+ this.x +
							'</b> <br/> Valor: <b>'+ this.y +'%</b>';
					}
				},
				legend: {
					layout: 'vertical',
					align: 'center',
					x: 100,
					verticalAlign: 'top',
					y: 30,
					floating: true,
					backgroundColor: '#FFFFFF'
				},
				series: [
				data.evolutivo.serie_{{nombrevar | lower }}
				{% if "PRECIO" in variables %}
				, data.evolutivo.serie_precio
				{% endif %}
				],
				credits: {
					enabled: false
				}
			});
			
			
			
		{% endif %}
		
		
		// evo_quiebre_precio = new Highcharts.Chart({
            // chart: {
                // zoomType: 'x',
				// renderTo: 'evo_quiebre_precio'
            // },
            // title: {
                // text: 'Evolutivo Quiebre y Precio'
            // },
            // xAxis: [{
                // categories: ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun',
                    // 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic']
            // }],
            // yAxis: [{
                // title: {
                    // text: 'Promedio Quiebre (%)',
                    // style: {
                        // color: '#4572A7'
                    // }
                // }
    
            // }, {
                // //gridLineWidth: 0,
                // title: {
                    // text: 'Promedio Precio ($)',
                    // style: {
                        // color: '#89A54E'
                    // }
                // },
                // opposite: true
            // }],
            // tooltip: {
                // shared: true
            // },
            // legend: {
                // layout: 'vertical',
                // align: 'center',
                // x: 0,
                // verticalAlign: 'top',
                // y: 30,
                // floating: true,
                // backgroundColor: '#FFFFFF'
            // },
            // series: [data.evo_quiebre_precio.precio, data.evo_quiebre_precio.quiebre,
			// {
				// type: 'line',
				// marker: { enabled: false },
				// /* function returns data for trend-line */
				// data: (function() {
					  // return fitData(data.evo_quiebre_precio.quiebre.data).data;
					// })(),
				// name: 'Tendencia Quiebre'
			// }
			
			// ],
			// credits: {
				// enabled: false
			// },
            // plotOptions: {
                // series: {
                        // events: {
                            // legendItemClick: function () {
                                // var series = this.chart.series;
                                // var seriesIndex = this.index;
                                // if(seriesIndex == 1){//QUIEBRE
                                    // if(series[1].visible == false && series[0].visible == false) mostrarbandaquiebre();
                                    // if(series[1].visible == true && series[0].visible == true) mostrarbandaprecio();
                                // }
                                // if(seriesIndex == 0){//PRECIO
                                    // if(series[1].visible == true && series[0].visible == true) mostrarbandaquiebre();
                                    // if(series[1].visible == false && series[0].visible == false) mostrarbandaprecio();
                                // }
                                
                                // if((series[0].visible == false && series[1].visible == true) || (series[0].visible == true && series[1].visible == false)) borrarbandas();
                                
                                
                                
                                // //return false; // <== returning false will cancel the default action
                            // }
                        // }
                    // ,
                    // showInLegend: true
                // }
            // }
        // });
        
        function mostrarbandaquiebre(){
            borrarbandas();
            var trasparencia = 0.15;
            evo_quiebre_precio.yAxis[0].addPlotBand({ // Buen quiebre
                from: 0,
                to: 20,
                color: 'rgba(0, 200, 0, '+trasparencia+')',
                id: 'pb-q1',
                label: {
                    text: 'Quiebre aceptable',
                    style: {
                        color: '#606060'
                    }
                }
            });
            evo_quiebre_precio.yAxis[0].addPlotBand({ // Intermedio quiebre
                from: 20,
                to: 40,
                color: 'rgba(200, 200, 0, '+trasparencia+')',
                id: 'pb-q2',
                label: {
                    text: 'Quiebre peligroso',
                    style: {
                        color: '#606060'
                    }
                }
            });
            evo_quiebre_precio.yAxis[0].addPlotBand({ // Mal quiebre
                from: 40,
                to: 100,
                color: 'rgba(200, 0, 0, '+trasparencia+')',
                id: 'pb-q3',
                label: {
                    text: 'Quiebre excesivo',
                    style: {
                        color: '#606060'
                    }
                }
            });
            
        }
        
        function mostrarbandaprecio(){
            borrarbandas();
            var trasparencia = 0.15;
            evo_quiebre_precio.yAxis[1].addPlotBand({ // Buen quiebre
                from: 0,
                to: 3000,
                color: 'rgba(0, 200, 0, '+trasparencia+')',
                id: 'pb-p1',
                label: {
                    text: 'Precio aceptable',
                    style: {
                        color: '#606060'
                    }
                }
            });
            evo_quiebre_precio.yAxis[1].addPlotBand({ // Intermedio quiebre
                from: 3000,
                to: 5000,
                color: 'rgba(200, 0, 0, '+trasparencia+')',
                id: 'pb-p2',
                label: {
                    text: 'Precio peligroso',
                    style: {
                        color: '#606060'
                    }
                }
            });
            
        }
        
        function borrarbandas(){
            evo_quiebre_precio.yAxis[0].removePlotBand('pb-q1');
            evo_quiebre_precio.yAxis[0].removePlotBand('pb-q2');
            evo_quiebre_precio.yAxis[0].removePlotBand('pb-q3');
            evo_quiebre_precio.yAxis[1].removePlotBand('pb-p1');
            evo_quiebre_precio.yAxis[1].removePlotBand('pb-p2');
        }
	
	});

	var query_map = {{ query_map|raw }};

	var bounds = new L.LatLngBounds([-57,-82], [-15,-63]);

	//MAPA
	var map = L.map('map',{
		attributionControl: false
		,fullscreenControl: true
		,maxBounds: bounds
	}).setView([-32.24, -70.82], 5);

	L.tileLayer('http://{s}.tile.cloudmade.com/a0335be631064bc0b5aae85cb6b07490/997/256/{z}/{x}/{y}.png', {
	    // attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="http://cloudmade.com">CloudMade</a>',
	    maxZoom: 17
	}).addTo(map);

	// map.on('mouseover', function(e){
	// 	$('#map').css('width', '500px').zIndex(10);
	// 	map.invalidateSize();
	// });
	// map.on('mouseout', function(e){
	// 	$('#map').css('width', 'auto').zIndex(0);
	// 	map.invalidateSize();
	// });

	var markers = new L.MarkerClusterGroup({
		// zoomToBoundsOnClick: false,
		singleMarkerMode: true,
		maxClusterRadius: 40,
		iconCreateFunction: function(cluster) {
	        var childCount = cluster.getChildCount();
	        var markers = cluster.getAllChildMarkers();
	        var variable = 0;
	        var count = 0;
	        for(i in markers){
	        	var t = markers[i].options.title;
	        	variable += parseFloat(t.split('\n')[1]);
	        	count++;
	        }

        	variable = variable/count;
        	variable = variable.toFixed(1);

			var c = ' marker-cluster-';
			if (variable < 10) {
				c += 'small';
			} else if (variable < 30) {
				c += 'medium';
			} else {
				c += 'large';
			}
			

			return new L.DivIcon({ html: '<div><span>' + variable + '</span></div>', className: 'marker-cluster' + c, iconSize: new L.Point(40, 40) });
	    }
	});
	for (i in query_map) {
		if(!isNaN(parseFloat(query_map[i].lat)) && !isNaN(parseFloat(query_map[i].lon)) && bounds.contains([parseFloat(query_map[i].lat), parseFloat(query_map[i].lon)])){
			var title = query_map[i].cadena + ',' + query_map[i].calle + '\n' + parseFloat(query_map[i].quiebre).toFixed(1);
			var marker = L.marker([parseFloat(query_map[i].lat), parseFloat(query_map[i].lon)], { title: title });
			// title = title.replace('\n','<br>');
			// marker.bindPopup(title);
			markers.addLayer(marker);
		}else{
			if(isNaN(parseFloat(query_map[i].lat)) || isNaN(parseFloat(query_map[i].lon))) console.log('LA SALA '+query_map[i].cadena + ',' + query_map[i].calle + '. NO TIENE LATITUD,LONGITUD');
			if(!isNaN(parseFloat(query_map[i].lat)) && !isNaN(parseFloat(query_map[i].lon)) && !bounds.contains([parseFloat(query_map[i].lat), parseFloat(query_map[i].lon)])) console.log('LA SALA '+query_map[i].cadena + ',' + query_map[i].calle + '. SE SALE DE LAS COORDENADAS DE CHILE');
		}
	}

	map.addLayer(markers);

	markers.on('clustermouseover', function (a) {
		var visibleOne = markers.getVisibleParent(a.layer);
		var markers_ = visibleOne.getAllChildMarkers();
		var variable = 0;
        var count = 0;
        var salas = "";
        for(i in markers_){
        	var t = markers_[i].options.title;
        	variable += parseFloat(t.split('\n')[1]);
        	salas += t.split('\n')[0]+';';
        	count++;
        }

    	variable = variable/count;
    	variable = variable.toFixed(1);
    	salas = salas.slice(0, -1);
    	visibleOne._icon.title = salas + '\n' + variable;
		// visibleOne.bindPopup('AAA').openPopup();
	});

	$('#form_variable_map').on('change',function(){
		$.get("{{ path('dashboard_map') }}", $(this).serialize(), function(data){
			if(data.status == true){
				markers.clearLayers();
				
				switch(data.variable){
					case 'QUIEBRE':
					case 'PRESENCIA':
						for(i in data.query_map){
							if(!isNaN(parseFloat(data.query_map[i].lat)) && !isNaN(parseFloat(data.query_map[i].lon)) && bounds.contains([parseFloat(data.query_map[i].lat), parseFloat(data.query_map[i].lon)])){
								var title = data.query_map[i].cadena + ',' + data.query_map[i].calle + '\n' + parseFloat(data.query_map[i].quiebre).toFixed(1);
								var marker = L.marker([parseFloat(data.query_map[i].lat), parseFloat(data.query_map[i].lon)], { title: title });
								markers.addLayer(marker);
							}else{//INFO DE SALAS
								if(isNaN(parseFloat(data.query_map[i].lat)) || isNaN(parseFloat(data.query_map[i].lon))) console.log('LA SALA '+data.query_map[i].cadena + ',' + data.query_map[i].calle + '. NO TIENE LATITUD,LONGITUD');
								if(!isNaN(parseFloat(data.query_map[i].lat)) && !isNaN(parseFloat(data.query_map[i].lon)) && !bounds.contains([parseFloat(data.query_map[i].lat), parseFloat(data.query_map[i].lon)])) console.log('LA SALA '+data.query_map[i].cadena + ',' + data.query_map[i].calle + '. SE SALE DE LAS COORDENADAS DE CHILE');
							}
						}
						break;
					case 'PRECIO':
						for(i in data.query_map){
							if(!isNaN(parseFloat(data.query_map[i].lat)) && !isNaN(parseFloat(data.query_map[i].lon)) && bounds.contains([parseFloat(data.query_map[i].lat), parseFloat(data.query_map[i].lon)])){
								var title = data.query_map[i].cadena + ',' + data.query_map[i].calle + '\n' + parseFloat(data.query_map[i].porc_incumplimiento).toFixed(1);
								var marker = L.marker([parseFloat(data.query_map[i].lat), parseFloat(data.query_map[i].lon)], { title: title });
								markers.addLayer(marker);
							}else{//INFO DE SALAS
								if(isNaN(parseFloat(data.query_map[i].lat)) || isNaN(parseFloat(data.query_map[i].lon))) console.log('LA SALA '+data.query_map[i].cadena + ',' + data.query_map[i].calle + '. NO TIENE LATITUD,LONGITUD');
								if(!isNaN(parseFloat(data.query_map[i].lat)) && !isNaN(parseFloat(data.query_map[i].lon)) && !bounds.contains([parseFloat(data.query_map[i].lat), parseFloat(data.query_map[i].lon)])) console.log('LA SALA '+data.query_map[i].cadena + ',' + data.query_map[i].calle + '. SE SALE DE LAS COORDENADAS DE CHILE');
							}
						}
						break;
					default:
						alert('ERROR, VARIABLE NO SOPORTADA');
				}
			}
			else{
				if(data.mensaje != undefined) alert('ERROR: '+data.mensaje);
				else alert('ERROR GRAVE.')
			}
		},"json")
		.fail(function(){alert('ERROR GRAVE AL INTENTAR TRAER LOS DATOS DEL MAPA.')});
	});





});
 </script>
{% endblock %}