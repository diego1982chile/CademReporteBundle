{% extends '::base.html.twig' %}

{% block title %}Cadem Reporte{% endblock %}

{% block filtro %}
	<form id="filtros" action="" method="post" >
		{% for form in forms %}
				{{ form_widget(form) }}
		{% endfor %}
	<input class="btn btn-primary" type="submit" value="Filtrar" />
	<input class="btn btn-warning" type="submit" value="Limpiar Filtros" />
{% endblock %}

{% block body %}
    <div class="span9">
		<div class="container-fluid well" style="padding-top:0">
			<h4>Vista Resumen de Quiebre</h4>
				<div class="hero-unit" style="padding:15px;margin-bottom:10px">
					<div id='container' class="row-fluid">
							<table id="tabla_resumen" class="table table-bordered display" cellpadding="0" cellspacing="0" border="0">                      
								<thead>
									<tr>
										{% for item in head %}
										<th title="{{item|upper}}" tag="{{item|upper}}">
											{% if item|replace({' ':'_'})|length>8 %}
												{{item|replace({' ':'_'})[0:8]|upper}}...
											{% else %}
												{{item|upper}}
											{% endif %}
										</th>
										{% endfor %}
									</tr>
								</thead>
								<tbody>									
								</tbody>                        					                   
							</table>			
					</div><!--/row-->   
				</div>
					<div class="hero-unit" style="padding:30px">
							<div class="row-fluid">
							{# {% for item in variables_clientes %} #}
								<div id="i_quiebre" ></div>
							{# {% endfor %} #}			
							</div>
					</div>             
				</div><!--/span-->
			</div>
		</div>
{% endblock %}

{% block customstyles %}

div.dataTables_scroll { 
	clear: both !important; 
}

td{
	font-size: .64em !important;
	text-align: center !important;
}

th{
	font-size: .64em !important;
	text-align: center !important;
}

.tag{
	text-align: left !important;
}

span.indenter{
	padding-left:0em !important;
}

.hero-unit select{
	width: auto;
	padding: 0;
	margin-bottom: 0;
}

.hero-unit input{
	width: auto;
	padding: 0;
	margin-bottom: 0;
}

.hero-unit label{
	margin-bottom: 0;
}

.total {
	background-color:'#F7FE2E' !important;
}

legend {
	font-size: 12px !important;
	font-weight: bold !important;
	margin-bottom: 10px !important;
	color: '#999' !important;
}
{% endblock %}

{% block stylesheets %}
<link href="{{ asset('bundles/cademreporte/css/demo_table.css') }}" rel="stylesheet">			
<link href="{{ asset('bundles/cademreporte/css/jquery.dataTables_themeroller.css') }}" rel="stylesheet">
{% endblock %}

{% block javascripts %}
<script src="{{ asset('bundles/cademreporte/js/jquery.dataTables.min.js') }}"></script>
<script src="{{ asset('bundles/cademreporte/js/dataTables.fixedColumns.js') }}"></script>
<script>
//{#% for item in variables_clientes %#}
//{#{"var i_"~item.variable.nombre~";"}#}
//{#% endfor %#}

var i_quiebre;
var periodo = {{ periodos|raw }};
var oTable;
var maxWidth;

function calcularAnchoMaximo()
{
	// Calcula el ancho máximo de la tabla	
	var extension={{head|length*10-100}};
	
	if(extension<0)
		extension=0;
		
	maxWidth=100+extension;
	
	$('table').css('max-width',maxWidth+'%');
	// alert('maxWidth='+maxWidth);
}

function construirTabla()
{
	oTable = $('#tabla_resumen').dataTable({
		"bProcessing": true,
		"bServerSide": true,
		"sAjaxSource": "{{ path('tabla') }}",
		"sScrollY": "300px",
		"sScrollX": "100%",
 		"sScrollXInner": maxWidth+'%',
 		"bScrollCollapse": true,
		"bFilter": false,
		"bSort": false,
		"bInfo": false,
		"bPaginate": false,
		"bJQueryUI": true,
		"bAutoWidth": false, 
		"aoColumnDefs": [
			{ "bVisible": false, "aTargets": [1] }
		],
		"aaSortingFixed": [[ 1, 'asc' ]],
	//	"sDom": '<"H"Cfr>t<"F"ip>',					
	});
	$('div.fg-toolbar:first').append("<h5 style='float:left;margin:0em'>Tabla Resumen Quiebre: (%) de Quiebre Categoria/Cadena</h5>");
}

function fixedColumn()
{
		new FixedColumns( oTable, {
		"fnDrawCallback": function ( left, right ) {
			/////////////////////////// Esta parte añade las filas de agregacion a la tabla //////////////////////////////////
			var oSettings = oTable.fnSettings();
			if ( oSettings.aiDisplay.length === 0 )
			{
				return;
			}

			var nGroup, nCell, iIndex, sGroup;
			var sLastGroup = "", iCorrector=0;
			var nTrs = $('#tabla_resumen tbody tr');
			// var iColspan = nTrs[0].getElementsByTagName('td').length;
            var cols=oTable.fnSettings().aoColumns.length-1;
			
			for ( var i=0 ; i<nTrs.length ; i++ )
			{
				iIndex = oSettings._iDisplayStart + i;

				sGroup = oSettings.aoData[ oSettings.aiDisplay[iIndex] ]._aData[1];
				
				if ( sGroup != sLastGroup )
				{
              		var nGroup = document.createElement('tr');
					
					var nCells= new Array();    
                  
                    for(var j=0 ; j< cols ; j++)
					{
						nCells[j] = document.createElement( 'td' );						 
						nCells[j].className = "group";														
						nCells[j].innerHTML = 0;
																	
						nGroup.appendChild( nCells[j] );						 
					}
                    nTrs[i].parentNode.insertBefore( nGroup, nTrs[i] );
					// Se crea atributo que asocie la fila de agregacion con sus filas hijas
					var att=document.createAttribute("data-tt-id");
					att.value=sGroup;
					nTrs[i].previousSibling.setAttributeNode(att);
					// Se agrega una clase que permita seleccionar cada fila de agregacion
					var att=document.createAttribute("class");
					att.value="parent";
					// Se añade fila de agregacion para tabla principal
					nTrs[i].previousSibling.setAttributeNode(att);				
                    
					// /* Cell to insert into the frozen columns */
					
                    nGroup = document.createElement( 'tr' );
					nCell = document.createElement( 'td' );
					nCell.className = "group tag";
					nCell.innerHTML = sGroup.toUpperCase();
					nGroup.appendChild( nCell );
                    // Se añade fila de agregacion para tabla fija
					$(nGroup).insertBefore( $('tbody tr:eq('+(i+iCorrector)+')', left.body)[0] );
					
					iCorrector++;
					sLastGroup = sGroup;
				}
			}
			//////////////// Esta parte calcula los valores de las agregaciones (SEGMENTO Y TOTAL) //////////////////////
					
				// var totalesGlobales=new Array();
				// var contGlobal=0;
				// for (var i = 0; i < cols ; i++) totalesGlobales[i] = 0;
				// $('#tabla_resumen tbody tr.parent').each(function(){						
					// var totalesParciales= new Array();
					// for (var i = 0; i < cols; i++) totalesParciales[i] = 0;
					// var cont=0;
					// $('#tabla_resumen tbody tr[data-tt-parent-id="'+$(this).attr('data-tt-id')+'"]').each(function(){
						// contGlobal++;
						// var j=0;
						// $(this).children().each(function(){
							// if($(this).attr('value')=='-')
								// totalesParciales[j]=totalesParciales[j]+0;
							// else
								// totalesParciales[j]=totalesParciales[j]+parseInt($(this).attr('value'));
							// j++;
						// });
						// cont++;
					// });
					// var j=0;
					// $(this).children().each(function(){
						// $(this).text(parseFloat((totalesParciales[j]/cont)).toFixed(1));
						// totalesGlobales[j]=totalesGlobales[j]+totalesParciales[j];							
						// j++;
					// });
				// });	
				// var nTrs = $('#tabla_resumen tbody tr');
				// var nGroup = document.createElement( 'tr' );
						
				// var nCells= new Array();
				
				// for(var j=0 ; j<cols ; j++)
				// {
					// nCells[j] = document.createElement( 'td' );					
					// nCells[j].className = "group";							
						
					// nCells[j].innerHTML = parseFloat((totalesGlobales[j])/contGlobal).toFixed(1);//totales[j];					
					// nGroup.appendChild( nCells[j] );
				// }			
				// nTrs[0].parentNode.insertBefore( nGroup, nTrs[0] );
				// var att=document.createAttribute("class");
				// att.value="parent head";
				// // Se añade fila de agregacion para tabla principal
				// nTrs[0].previousSibling.setAttributeNode(att);		
				
                // nGroup = document.createElement( 'tr' );
				// nCell = document.createElement( 'td' );
				// nCell.className = "group tag";
				// nCell.innerHTML = "QUIEBRE GENERAL";
				// nGroup.appendChild( nCell );
                // // Se añade fila de agregacion para tabla fija
				// $(nGroup).insertBefore( $('tbody tr:eq('+(0)+')', left.body)[0] );				
								
                // // Se añade fila de agregacion para tabla fija
				// $(nGroup).insertBefore( $('tbody tr:eq('+(0)+')', left.body)[0] );					
				///////////////////////////////////////////////////////////////////////////////////////////////////////////
		}
	});
}

$(document).ready(function () {
	
	var callbacks = $.Callbacks();

	callbacks.add( calcularAnchoMaximo() );
	callbacks.add( construirTabla() );
	// callbacks.add( fixedColumn() );
	
	{#% for item in variables_clientes %#}
        {#% if loop.index == 1 %#}
		//{#{"i_"~item.variable.nombre}#} = new Highcharts.Chart({
		i_quiebre = new Highcharts.Chart({
		chart: {    
			renderTo: 'i_quiebre',
                        type: 'spline',
                        //marginRight: 130,
                        //marginBottom: 25,                                
			plotBackgroundColor: null,
			plotBorderWidth: null,
			plotShadow: false,
                        width: 900,
                        height: 350                        
		},
		title: {
			text: 'Evolución Quiebre'
		},
		tooltip: {
			pointFormat: '{series.name}: <b>{point.percentage}%</b>',
			percentageDecimals: 1,
			enabled: true
		},
		xAxis: {
            categories: periodo.data,
			
			labels: {
                rotation: 0
            }			
		},		
		yAxis: {
	        max: 100,
			min: 0,
            //categories: [0,100],
			title: {
                    text: 'Promedio Quiebre (%)'
            }
		},		
		series: [{
                    name: '% Quiebre',
                    data: {{ evolutivo }}			
                }],
		legend: {
               layout: 'vertical',
               align: 'center',
               x: 400,
               verticalAlign: 'top',
               y: 0,
               floating: true
            },				
		credits: {
			enabled: false
		}
	});
        {#% endif %#}
	{#% endfor %#}
	
	cargartooltip();
	});						
				
		// $("#tabla_resumen").treetable({ 
			// expandable: true, 
			// onNodeExpand: function () {			
			// }
		// });	
	
		
		$('thead th').click(function() {
			var label= $(this).attr('tag');
		
			$(".ui-state-active").removeClass("ui-state-active");
			$(this).addClass("ui-state-active");
			$.get( "{#{ path('resumen_evolutivo') }#}", label, function(data) {	
				{#% for item in variables_clientes %#}
					{#% if loop.index == 1 %#}
						i_quiebre.series[0].setData(data); 
						i_quiebre.setTitle({ text: "Evolucion Quiebre '"+label +"'"});
					{#% endif %#}
				{#% endfor %#}
				cargartooltip();
			});
		});		
		
		//GUARDA QUE BOTON SE PRESIONA EN EL FORMULARIO
		var $boton_presionado;
		$('form#filtros input').click(function() {
			$boton_presionado = $(this);
		});
		
		//LOGICA DEL SUBMIT DEL FORMULARIO, SE DEBERIA OCUPAR AJAX
		$('form#filtros').submit(function() {
			if($boton_presionado.attr("value") === "Limpiar Filtros"){
				$('form#filtros select[multiple="multiple"] option').prop('selected',true);
			}
			if($boton_presionado.attr("value") === "Filtrar"){
				$.get( "{{ path('resumen_periodo') }}", $(this).serialize(), function(data) {

					$('#tabla_resumen tbody tr').each(function(){
						var cont=0;
						$(this).children().each(function(){
							if(cont>0)
								$(this).text(Math.floor((Math.random()*100)+1));
							cont++;
						});
					});
				{#% for item in variables_clientes %#}
					{#% if loop.index == 1 %#}
						i_quiebre.series[0].setData(data.evolutivo); 
						i_quiebre.setTitle({ text: "Evolucion Quiebre General"});
					{#% endif %#}
				{#% endfor %#} 
				},
				'json');
			}
		return false;
	});

	function cargartooltip(){
		$.each(periodo.data, function(index, value) {
			$('div#i_quiebre tspan:contains("'+value+'")').attr('title', periodo.tooltip[index])
			.tooltip({
				track: true
			});
		});	
	}
 </script>
{% endblock %}