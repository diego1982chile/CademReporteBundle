{% extends '::base.html.twig' %}

{#% set url_body = path('quiebre_evolucion_body') %#}
{#% set url_header = path('quiebre_evolucion_header') %#}
{% set url_body_action = path(body_action) %}
{% set url_header_action = path(header_action) %}

{% block title %}Cadem Analytics{% endblock %}

{% block filtro %}
	<form id="filtros" action="" method="post" >
		{% for form in forms %}
				{{ form_widget(form) }}
		{% endfor %}
		<input class="btn btn-primary" type="submit" value="Filtrar" />
		<input class="btn btn-warning" type="submit" value="Limpiar Filtros" />
	</form>
{% endblock %}

{% block body %}
    <div class="span9">
		<div class="container-fluid well" style="padding-top:0">
			<h4>Evolución de {{tag_variable}}</h4>
				<div class="hero-unit" style="padding:15px;margin-bottom:10px">
					<div id='container' class="row-fluid">
							<table id="tabla_resumen" class="tabla_resumen table-bordered table display">                      
								<thead>
									<tr>
										{% for item in head %}
										<th title='{{item}}' style='vertical-align:middle'>
											{% if loop.index>columnas_reservadas and loop.index!=head|length %}										
												{{item|replace({' ':''})}}
											{% else %}	
												{{item}}
											{% endif %}	
										</th>
										{% endfor %}
									</tr>
								</thead>
								<tbody>					
								</tbody>                        					                   
							</table>
					</div><!--/row-->   
				</div>
					<div class="hero-unit" style="padding:30px">
							<div class="row-fluid">
								<div id="i_quiebre" ></div>								
							</div>
					</div>             
				</div><!--/span-->
			</div>
		</div>
{% endblock %}

{% block customstyles %}
div.dataTables_scroll { 
	clear: both !important; 
	}

{% if variable=='1' %}
table tbody tr{ 
	height: 1.23em !important;
}
{% endif %} 	
	
td{
	text-align: center !important;
	font-size: .5em !important;
	padding: 0em !important;
}

.medicion{
	text-align: center !important;	
}

th{
	font-size: .55em !important;
	text-align: center !important;
	padding: 0em !important;
}	

span.indenter{
	padding-left:0em !important;	
}

.tag{
	text-align: left !important;
	vertical-align: middle !important;
}

.tag2{
	vertical-align: middle !important;
	padding-left: .5em !important;
	padding-right: .5em !important;
}

/* Block out what is behind the fixed column's header and footer */
table.DTFC_Cloned thead,
table.DTFC_Cloned tfoot {
	background-color: white !important;
}

/* Block out the gap above the scrollbar on the right, when there is a fixed
 * right column
 */
div.DTFC_Blocker {
	background-color: white !important;
}

div.DataTables_sort_wrapper {
	padding-right: 4px !important;
	padding-left: 4px !important;
}

.highcharts-axis-labels text{
	font-size: 9px !important; 
}

.matched_active{			
	/*border-style: solid;	
	border-width: 2px;*/
	border-color: #00FF00;
	background-color: #d1ffd1 !important;
	
}

.matched{			
	/*border-style: solid;
	border-width: 2px;*/
	border-color: yellow;
	background-color: rgb(253, 255, 209) !important;
}

{% endblock %}

{% block stylesheets %}
<link href="{{ asset('bundles/cademreporte/css/demo_table.css') }}" rel="stylesheet">			
<link href="{{ asset('bundles/cademreporte/css/jquery.dataTables_themeroller.css') }}" rel="stylesheet">
<link href="{{ asset('bundles/cademreporte/css/redmond/jquery-ui.min.css') }}" rel="stylesheet">
{% endblock %}

{% block javascripts %}

<script src="{{ asset('bundles/cademreporte/js/jquery.dataTables.min.js') }}"></script>
<script src="{{ asset('bundles/cademreporte/js/dataTables.fixedColumns.js') }}"></script>

<script>
{#% for item in variables_clientes %#}
{#{"var i_"~item.variable.nombre~";"}#}
{#% endfor %#}

var oTable;
var maxWidth={{max_width}};
var maxHeight;
var DatosAdicionales = [];
var matriz_totales = [];
var variable = parseInt({{variable}});
var aoColumnDefs = {{aoColumnDefs|raw}};
var columnas_reservadas = parseInt({{columnas_reservadas}});
var i_quiebre;
var mediciones = {{mediciones|raw}};

function preInitTabla()
{
	// Calcula el ancho máximo de la tabla	
	var anchoPantalla= screen.width;	
	// Corregir el maxwidth en base a la resolucion de la pantalla

	switch(anchoPantalla)
	{
		case 1366:						
			break;
		case 1360:
			maxWidth=maxWidth*1.1;
			break;
		case 1280:
			maxWidth=maxWidth*1.15;
			break;
		case 1024:
			maxWidth=maxWidth*1.3;
			break;
		case 800:
			maxWidth=maxWidth*1.25;
			break;
	}	
	$('#tabla_resumen').css('max-width',maxWidth+'%');
	maxHeight=400;		
}

function construirTabla()
{
	$('#tabla_resumen').ready(function(){		
		oTable = $('#tabla_resumen').dataTable({
			"bProcessing": true,
			"bServerSide": true,
			"sAjaxSource": "{{ url_body_action }}",
			"fnServerData": function ( sSource, aoData, fnCallback ) {
				//AGREGAMOS LOS DATOS SOLO SI HAY
				if (DatosAdicionales.length > 0) for(i in DatosAdicionales) aoData.push(DatosAdicionales[i]);
				$.ajax( {
					"dataType": 'json', 
					"type": "GET", 
					"url": sSource, 
					"data": aoData, 
					"success": function(data){//QUE PASA SI FALLA?									
								matriz_totales=data.matriz_totales;	
								maxWidth=parseInt(data.max_width);																							
								// alert(JSON.stringify(matriz_totales));
								fnCallback(data);
								DatosAdicionales = [];//AL FINAL SE BORRAN
							}
				} )
				.done(function() { colorTotales(); })
				.fail(function() {  })
				.always(function() { quitarloader(); });
			},	
			// "bDeferRender": true,
			"sScrollY": maxHeight+'px',
			"sScrollX": "100%",
			"sScrollXInner": maxWidth+'%',
			"bScrollCollapse": true,
			"bFilter": false,
			"bSort": false,
			"bInfo": false,
			"bPaginate": false,			
			"bJQueryUI": true,
			"bAutoWidth": false, 
			// "bScrollInfinite": true,
			"aoColumnDefs": aoColumnDefs,
			"aaSortingFixed": [[ 1, 'asc' ]],
			"sPaginationType": "full_numbers",		
			"fnRowCallback": function( nRow, aData, iDisplayIndex, iDisplayIndexFull ) {	
								switch(variable)
								{
									case 1:
									case 5:
										var col=0;
										break;										
									case 2:
										var col=1;
										break;										
								}								
								$(nRow).children(':eq('+col+')').attr('index',iDisplayIndex);
								if(aData[0].length>14)
									$(nRow).children(':eq(0)').text(aData[0].substring(0,14).replace(/ /g,'_')+'...');
								else
									$(nRow).children(':eq(0)').text(aData[0].replace(/ /g,'_'));									
								if(aData[col].length>40)
									$(nRow).children(':eq('+col+')').text(aData[col].substring(0,40).replace(/ /g,'_')+'...');
								else
									$(nRow).children(':eq('+col+')').text(aData[col].replace(/ /g,'_'));							 
								$(nRow).attr('title',aData[col]);													
							},						
			"fnInitComplete": function() {
					switch(parseInt(variable))
					{
						case 1:	
						case 5:
							fixedColumn1();
							break;						
						case 2:							
							fixedColumn2();
							break;							
					}					
					// $(window).resize(function(){								
						// oTable.fnAdjustColumnSizing();
					// });				  
				},	
			"oLanguage": {
				  "sProcessing": "<b>Procesando...</b>"
				},
			"fnDrawCallback": function() {
					quitarloader();
			}					
		});
		$('div.fg-toolbar:first').append("<h5 style='float:left;margin:0em'>Tabla Evolución {{tag_variable}}: (%)</h5>");	
		$("<div class='dataTables_filter' align='right' style='float:right'><label>buscar: <input id='buscar' /></label></div>").appendTo('#tabla_resumen_wrapper .fg-toolbar:first');				 				 
		});	
}

function listenerFiltro()
{	
	var filtrado= false;
	var indice=0;

	$('#buscar').keydown(function(e){				
		setTimeout("setFocus('buscar')", 0);	
		switch(e.keyCode)
		{			
			case 13:	
				var needle=$('#buscar').val().toUpperCase();	
				var delta=$('table.DTFC_Cloned tbody tr').height();
				var offset=delta;
				var oSettings = oTable.fnSettings();
				var ventana= maxHeight;					
				
				if(needle=='')
				{
					$('.matched').removeClass('matched');	
					$('.matched_active').removeClass('matched_active');	
					return false;
				}
				if(!filtrado)
				{
					filtrado=true;							
					var hit=false;
					// $('.ui-state-active').removeClass('ui-state-active');				
					$('.matched').removeClass('matched');	
					$('.matched_active').removeClass('matched_active');	
					$('table.DTFC_Cloned tbody tr').each(function(){						
						var haystack=$(this).attr('title').toString().toUpperCase();		
						// alert(haystack);
						if (haystack.indexOf(needle)!=-1) {															
							if(!hit)							
								clase='matched_active';														
							else							
								clase='matched';
														
							
							$(this).addClass(clase);
							
							$('#tabla_resumen tbody').children(':eq('+$(this).index()+')').addClass(clase);
							hit=true;							
						}
						if(!hit)
							offset=offset+delta;
					});
					if(hit)
					{					
						if(offset<=ventana)
							offset=0;
						else
							offset=offset-delta;					
						$('.dataTables_scrollBody').animate({ scrollTop: offset });		
					}
					else
					{
						alert('El item no fue encontrado');
						$('#buscar').val('');
						$('.dataTables_scrollBody').animate({ scrollTop: 0 });	
					}
				}
				else
				{									
					offset=($('.matched:first').index())*delta-ventana/2;
					if($('.matched').length==2)
						filtrado=false;
					$('.matched_active').removeClass('matched_active');	
					$('#tabla_resumen tbody tr.matched:first').addClass('matched_active');
					$('#tabla_resumen tbody tr.matched:first').removeClass('matched');	
					
					$('table.DTFC_Cloned tbody tr.matched:first').addClass('matched_active');
					$('table.DTFC_Cloned tbody tr.matched:first').removeClass('matched');						
					
					$('.dataTables_scrollBody').animate({ scrollTop: offset });						
				}
				break;
			default:
				filtrado=false;
				break;
		}		
	});	
}

function setFocus(id)
{
	document.getElementById(id).focus();
}

function fixedColumn1()
{				
		new FixedColumns( oTable, {
		// "sLeftWidth": "relative",
		// "iLeftWidth": 10, // percentage
		"sHeightMatch": "none",
		"fnDrawCallback": function ( left, right ) {
			/////////////////////////// Esta parte añade las filas de agregacion a la tabla //////////////////////////////////
			var oSettings = oTable.fnSettings();
			if ( oSettings.aiDisplay.length === 0 )
			{
				return;
			}
			var nGroup, nCell, iIndex, sGroup;
			var sLastGroup = "", iCorrector=0;
			var nTrs = $('#tabla_resumen tbody tr');
			// var iColspan = nTrs[0].getElementsByTagName('td').length;
            var cols=oTable.fnSettings().aoColumns.length-2;
			var row=0;
			
			for ( var i=0 ; i<nTrs.length ; ++i )
			{
				iIndex = oSettings._iDisplayStart + i;

				sGroup = oSettings.aoData[ oSettings.aiDisplay[iIndex] ]._aData[1];
				
				if ( sGroup != sLastGroup )
				{
              		var nGroup = document.createElement('tr');
					// Se agrgega una columna correspondiente a la columna oculta					 
					var nCell;
					nCell = document.createElement( 'td' );						 
					nCell.className = "group";																									
					nCell.innerHTML = 0;															
					nGroup.appendChild( nCell ); 					
					
                    for(var j=0 ; j< cols ; ++j)
					{
						nCell = document.createElement( 'td' );						 
						nCell.className = "group";																				
						// alert(matriz_totales[row][j]);
						nCell.innerHTML = matriz_totales[row][j];																						
						nGroup.appendChild( nCell );						 
					}					
                    nTrs[i].parentNode.insertBefore( nGroup, nTrs[i] );
					// Se crea atributo que asocie la fila de agregacion con sus filas hijas
					// Se añade fila de agregacion para tabla principal
					nTrs[i].previousSibling.setAttribute("data-tt-id",sGroup);									                    					
					
					// /* Cell to insert into the frozen columns */
					
                    nGroup = document.createElement( 'tr' );
					nCell = document.createElement( 'td' );
					nCell.className = "group tag";
					nCell.setAttribute('index',row);
					nCell.innerHTML = sGroup;
					nGroup.appendChild( nCell );					
					nGroup.setAttribute("title",sGroup);
                    // Se añade fila de agregacion para tabla fija
					$(nGroup).insertBefore( $('tbody tr:eq('+(i+iCorrector)+')', left.body)[0] );						
					++row;
					iCorrector++;
					sLastGroup = sGroup;
				}
			}			
			var nGroup = document.createElement('tr');
			// Se agrgega una columna correspondiente a la columna oculta			
			var nCell;
			nCell = document.createElement( 'td' );						 
			nCell.className = "group";																									
			nCell.innerHTML = 0;															
			nGroup.appendChild( nCell ); 				
			
			for(var j=0 ; j< cols ; ++j)
			{
				nCell = document.createElement( 'td' );						 
				nCell.className = "group";																				
				// alert(matriz_totales[row][j]);
				nCell.innerHTML = matriz_totales[row][j];																
				nGroup.appendChild( nCell );						 
			}		
			$(nGroup).insertBefore( $('tbody tr:eq('+(0)+')', right.body)[0] );						
			// Se crea atributo que asocie la fila de agregacion con sus filas hijas
			var att=document.createAttribute("data-tt-id");
			att.value="TOTALES";			
			// Se añade fila de agregacion para tabla principal
			nTrs[0].previousSibling.setAttributeNode(att);									
			// /* Cell to insert into the frozen columns */
			
			nGroup = document.createElement( 'tr' );
			nCell = document.createElement( 'td' );
			nCell.className = "group tag";
			nCell.innerHTML = "TOTAL GENERAL";
			nGroup.appendChild( nCell );			
			nGroup.setAttribute("title","TOTAL GENERAL");
			// Se añade fila de agregacion para tabla fija
			$(nGroup).insertBefore( $('tbody tr:eq(0)', left.body)[0] );					
		}
	});	
	construirGrafico();
	listenerFiltro();
}

function fixedColumn2()
{
		new FixedColumns( oTable, {	
		"iLeftColumns": 1,
		"sHeightMatch": "none",		
		"fnDrawCallback": function ( left, right ) {
			/////////////////////////// Esta parte añade las filas de agregacion a la tabla //////////////////////////////////
			var that = this, groupVal = null, matches = 0, heights = [], index = -1;
			
			/* Get the heights of the cells and remove redundant ones */
			var cont=0;
			$('tbody tr td', left.body).each( function ( i ) {		
				
				var currVal = this.innerHTML;	
				
				/* Reset values on new cell data. */
				if (currVal != groupVal) {
					groupVal = currVal;
					index++;
					heights[index] = 0;
					matches = 0;
				} else  {
					matches++;
				}
				heights[ index ] += 21;
				// heights[ index ] += $(this.parentNode).height();
				if ( currVal == groupVal && matches > 0 ) {
					this.parentNode.parentNode.removeChild(this.parentNode);
				}
			} );

			/* Now set the height of the cells which remain, from the summed heights */
			$('tbody tr td', left.body).each( function ( i ) {
				that.fnSetRowHeight( this.parentNode, heights[ i ] );
			} );
		}		
	});
	
	new FixedColumns( oTable, {
		"sHeightMatch": "none",	
		"iLeftColumns": 2,		
	});
		
	construirGrafico();		
}

function colorTotales(){
	$('.tag').each(function(){
		$(this).css('cursor','pointer');
		// $(this).parent().attr('title',$(this).text());
	});
	switch(parseInt(variable))
	{
		case 1:
		case 5:
			var color_fondo = 'rgb(255, 235, 158)';
			
			$('.DTFC_Cloned tbody tr:first td').css('background-color',color_fondo);			
			$('.table:not(.DTFC_Cloned) tbody tr:first td').css('background-color',color_fondo);			
			
			// $('.DTFC_Cloned tbody tr:first td').addClass('btn-warning');			
			// $('.table:not(.DTFC_Cloned) tbody tr:first td').addClass('btn-warning');			
			
			$('.table:not(.DTFC_Cloned) tbody tr td:last-of-type:not(.group)').css('background-color',color_fondo);
			// $('.DTFC_Cloned tbody tr td:first-of-type:not(.group)').css({
				// 'background-color':'rgb(238, 236, 255)',
				// 'color': 'black',				
				// });			
			break;
		case 2:					
			$('.DTFC_Cloned tbody tr td:first-of-type:not(.group)').css({
				'background-color':'rgb(232, 231, 245)',
				'color': 'black',
				'border': '1px solid #B2B2B2',				
			});
			
			$('.DTFC_Cloned tbody tr td:nth-last-of-type(1):not(.group)').css({				
				'cursor': 'pointer'
			});			
			break;		
	}
}

function construirGrafico()
{	
	for(i in mediciones){
		mediciones[i]=mediciones[i].replace('SEM','');
		mediciones[i]=mediciones[i].replace(/ /g,'');	
	}

	switch(variable)	
	{
		case 1:
			var data=matriz_totales[matriz_totales.length-1];			
			data= data.slice(0,data.length-1);
			for(i in data){
				if(data[i] == '-') data[i]=null;
			}
			var series= [{
						name: '% Total Quiebre',
						data: data
						}]
			var prefijo='%';
			break;
		case 5:
			var data=matriz_totales[matriz_totales.length-1];			
			data= data.slice(0,data.length-1);
			for(i in data){
				if(data[i] == '-') data[i]=null;
			}
			var series= [{
						name: '% Total Presencia',
						data: data
						}]
			var prefijo='%';
			break;			
		case 2:
			var data=oTable.fnGetData(0);
			var tag=data[1];
			data= data.slice(2,data.length-1);
			for(i in data){
				if(data[i] == '-') data[i]=null;
			}
			var series=[{
						name: '% Precio '+tag,
						data: data
						}];	
			var prefijo='$';						
			break;
	}			
	
	i_quiebre = new Highcharts.Chart({
			chart: {    
				renderTo: 'i_quiebre',
							type: 'spline',
							//marginRight: 130,
							//marginBottom: 25,                                
				plotBackgroundColor: null,
				plotBorderWidth: null,
				plotShadow: false,
				// width: 900,
				// height: 350
			},
			plotOptions: {
						line: {
							gapSize: 6
						}
					},			
			title: {
				text: 'Evolución {{estudios[0].getEstudioVariables[0].getNombrevariable}}'
			},
			tooltip: {
				pointFormat: ' <span style="color:{series.color}">{series.name}</span>: <b>'+prefijo+'{point.y}</b><br/>',
				percentageDecimals: 1,
				enabled: true
			},
			xAxis: {
				categories: mediciones,
				
				labels: {
					rotation: 0,
					style: {
						fontWeight: "1"
					}
				}			
			},		
			yAxis: {
				// max: 100,
				// min: 0,
				//categories: [0,100],
				title: {
						text: 'Promedio {{tag_variable}}'
				}
			},		
			series: series,
			legend: {
				   layout: 'vertical',
				   align: 'center',
				   x: 300,
				   verticalAlign: 'top',
				   y: 0,				   				   
				},				
			credits: {
				enabled: false
			},

		});	
	return true;
}
		
$(document).ready(function () {

	var callbacks = $.Callbacks();

	callbacks.add( preInitTabla() );
	callbacks.add( construirTabla() );	
	
	$(window).bind('resize', function () {
		$('.DTFC_Cloned').find('.DataTables_sort_icon').append('<img class="loader" alt="" style="float:left;margin-left:20px" src="/bundles/cademreporte/images/loader-minitrans.gif">');	
		oTable.fnAdjustColumnSizing();
	});		
		
	$('#tabla_resumen_wrapper tr th').click(function() {
		var label= $(this).text().trim();
		$('.ui-state-active').removeClass();
		$(this).addClass('ui-state-active');
		$(".row_selected").removeClass("row_selected");
	});
		
	//GUARDA QUE BOTON SE PRESIONA EN EL FORMULARIO
	var $boton_presionado;
	$('form#filtros input').click(function() {
		$boton_presionado = $(this);
	});
	
	//LOGICA DEL SUBMIT DEL FORMULARIO, SE DEBERIA OCUPAR AJAX
	$('form#filtros').submit(function() {
		if($boton_presionado.attr("value") === "Limpiar Filtros"){
			$('form#filtros select[multiple="multiple"] option').prop('selected',true);
			$('#f_region_Region').change();
		}
		else procesarform(); //SE PROCESA FORMULARIO
		return false;
	});
		
	//REGION
	$(document).on('change', '#f_region_Region', function(){
		//RECARGAR PROVINCIA
		var datos = $(this).serialize();
		$('#f_provincia_Provincia').before('<img class="loader" alt="" style="float:right" src="/bundles/cademreporte/images/loader.gif">');
		$.get( "{{ path('helper_filtro_region') }}", datos, function(data) {
			$('#f_provincia').html(data);
		},'html')
		.done(function() {quitarloader(); $('#f_provincia_Provincia').change();})
		.fail(function() { alert("Se produjo un error al cargar las provincias");quitarloader();})
		.always(function() { /*alert("finished");*/});
	});
	
	//PROVINCIA
	$(document).on('change', '#f_provincia_Provincia', function(){
		//RECARGAR COMUNA
		var datos = $(this).serialize();
		$('#f_comuna_Comuna').before('<img class="loader" alt="" style="float:right" src="/bundles/cademreporte/images/loader.gif">');
		$.get( "{{ path('helper_filtro_provincia') }}", datos, function(data) {
			$('#f_comuna').html(data);
		},'html')
		.done(function() { /*alert("second success");*/ })
		.fail(function() { alert("Se produjo un error al cargar las comunas"); })
		.always(function() { /*alert("finished");*/ quitarloader();});
	});
	
	//GRAFICAR FILAS
	$(document).on('click', 'td.tag', function(e) {				
		
		var label= $(this).parent().attr('title').toLowerCase();
		var index=$(this).attr('index');				
		
		if($(this).hasClass('group'))
		{ // Si el elemento clickado es de clase grupo, el datasource esta en matriz_totales					
			var data=matriz_totales[index];
			data= data.slice(0,data.length-1);
			for(i in data){
				if(data[i] == '-') data[i]=null;
			}
		}
		else
		{ // Si no, el datasource esta en la tabla			
			var data=oTable.fnGetData( index );			
			data= data.slice(2,data.length-1);					
			for(i in data){
				if(data[i] == '-') data[i]=null;
			}			
		}						
						
		if (e.ctrlKey)
		{//AGREGAR OTRA LINEA		
			$(this).addClass("ui-state-active");								
			i_quiebre.addSeries({
				name: label,
				data: data
			});
		}
		else
		{//REEMPLAZAR TODO MENOS LINEA GENERAL			
			$(".ui-state-active").removeClass("ui-state-active");
			$(this).addClass("ui-state-active");						
			
			//SE REMUEVEN TODOS y SE AGREGA
			if (i_quiebre.series.length > 0){				
				switch(parseInt(variable))
				{
					case 1:
					case 5:
						ini=1;
						break;
					case 2:
						ini=0;
						break;
				}				
				var len = i_quiebre.series.length;
				for(var i=ini;i<len;i++) i_quiebre.series[i].remove();
			}
			i_quiebre.addSeries({
				name: label,
				data: data
			});			
		}
	});		
});

	//LOGICA DEL SUBMIT DEL FORMULARIO, SE DEBERIA OCUPAR AJAX
	function procesarform(){
	
		//LOADER
		$('form#filtros input').last().after('<img class="loader" alt="" style="float:right" src="/bundles/cademreporte/images/loader.gif">');
		//GET
		//PROCESO
		alert('aca se hace request get/post');
		//AL FINALIZAR
		quitarloader();
	}

	function quitarloader(){
		if($('.loader').length > 0) $('.loader').remove();
	}

//LOGICA DEL SUBMIT DEL FORMULARIO, SE DEBERIA OCUPAR AJAX
	function procesarform(){
		//SE CLONA FORM Y SE ARREGLA LOS ITEM SELECCIONADOS POR USUARIO
		var cform = $('form#filtros').clone();
		cform.find('option').removeAttr("selected");
		var originform = $('form#filtros option');
		originform.each(function(i) {
			if($(this).is(':selected')) cform.find('option').eq(i).attr("selected", true);
		});
		//SE QUITA REGION Y COMUNA
		cform.find('#f_region').remove();
		cform.find('#f_provincia').remove();
		cform.find('input').remove();
		
		var dataform = cform.serializeArray();
		
		DatosAdicionales = dataform;
		$('form#filtros input').last().after('<img class="loader" alt="" style="float:right" src="/bundles/cademreporte/images/loader.gif">');
		recargarTabla();
		// oTable.fnDraw();//SI NO FUNCIONA ESTO USAR LA DE ABAJO
		// oTable.fnReloadAjax();
	}
	
	function recargarTabla()
	{		
		$.get("{{ url_header_action }}",DatosAdicionales,function(data){			
			maxWidth=parseInt(data.max_width);
			// Primero destruimos la tabla si existe (la removemos del DOM)	
			var ex = document.getElementById('tabla_resumen');
			if ( $.fn.DataTable.fnIsDataTable( ex ) ) {
			  oTable.fnDestroy(true);
			}			
			// Luego generamos el html de la tabla y lo añadimos al DOM
			var table= document.createElement( 'table' );
			var thead= document.createElement( 'thead' );
			var att=document.createAttribute("id");
			att.value="tabla_resumen";					
			table.setAttributeNode(att);
			var att=document.createAttribute("class");
			att.value="tabla_resumen table table-bordered display";					
			table.setAttributeNode(att);			
			var tableHead = document.createElement( 'tr' );	 //tableheader 							
			$(data.head).each(function(key,value){				
				var tableHeading = document.createElement( 'th' );					
				tableHeading.innerHTML = value.replace(/ /g,'');												
				tableHead.appendChild( tableHeading );				
			});						
			table.appendChild( tableHead );	
			thead.appendChild( tableHead );
			table.appendChild( thead );						
			document.getElementById('container').appendChild(table);			
			// Luego recalculamos el ancho maximo en base a la cardinalidad del head
			preInitTabla();		
			// Luego volvemos a construir la tabla con dataTables
			construirTabla();
		},"json")
	}
	
	function quitarloader(){
		if($('.loader').length > 0) $('.loader').remove();
	}
				
	function cargartooltip(){
		$.each(periodo.data, function(index, value) {
			$('div#i_quiebre tspan:contains("'+value+'")').attr('title', periodo.tooltip[index])
			.tooltip({
				track: true
			});
		});	
	}		
	
	$.fn.dataTableExt.oApi.fnReloadAjax = function ( oSettings, sNewSource, fnCallback, bStandingRedraw )
	{
    if ( sNewSource !== undefined && sNewSource !== null ) {
        oSettings.sAjaxSource = sNewSource;
    }
 
    // Server-side processing should just call fnDraw
    if ( oSettings.oFeatures.bServerSide ) {
        this.fnDraw();
        return;
    }
 
    this.oApi._fnProcessingDisplay( oSettings, true );
    var that = this;
    var iStart = oSettings._iDisplayStart;
    var aData = [];
 
    this.oApi._fnServerParams( oSettings, aData );
 
    oSettings.fnServerData.call( oSettings.oInstance, oSettings.sAjaxSource, aData, function(json) {
        /* Clear the old information from the table */
        that.oApi._fnClearTable( oSettings );
 
        /* Got the data - add it to the table */
        var aData =  (oSettings.sAjaxDataProp !== "") ?
            that.oApi._fnGetObjectDataFn( oSettings.sAjaxDataProp )( json ) : json;
 
        for ( var i=0 ; i<aData.length ; i++ )
        {
            that.oApi._fnAddData( oSettings, aData[i] );
        }
         
        oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();
 
        that.fnDraw();
 
        if ( bStandingRedraw === true )
        {
            oSettings._iDisplayStart = iStart;
            that.oApi._fnCalculateEnd( oSettings );
            that.fnDraw( false );
        }
 
        that.oApi._fnProcessingDisplay( oSettings, false );
 
        /* Callback user function - for event handlers etc */
        if ( typeof fnCallback == 'function' && fnCallback !== null )
        {
            fnCallback( oSettings );
        }
    }, oSettings );
};			
	
 </script>
{% endblock %}