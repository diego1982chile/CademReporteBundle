{% extends '::base.html.twig' %}

{% block title %}Cadem Reporte{% endblock %}

{% block filtro %}
	<form id="filtros" action="" method="post" >
		{% for form in forms %}
				{{ form_widget(form) }}
		{% endfor %}
		<input class="btn btn-primary" type="submit" value="Filtrar" />
		<input class="btn btn-warning" type="submit" value="Limpiar Filtros" />
	</form>
{% endblock %}

{% block body %}
    <div class="span9">
		<div class="container-fluid well" style="padding-top:0">
			<h4>Vista Evolución de Quiebres</h4>
				<div class="hero-unit" style="padding:15px;margin-bottom:10px">
					<div id='container' class="row-fluid">
							<table id="tabla_resumen" class="tabla_resumen table-bordered table display">                      
								<thead>
									<tr>
										{% for item in head %}
										<th title='{{item}}' style='vertical-align:middle'>
											{% if loop.index>2 and loop.index<head|length %}
												{{item|replace({' ':''})}}
											{% else %}	
												{{item}}
											{% endif %}	
										</th>
										{% endfor %}
									</tr>
								</thead>
								<tbody>					
								</tbody>                        					                   
							</table>
					</div><!--/row-->   
				</div>
					<!--div class="hero-unit" style="padding:30px">
							<div class="row-fluid">
							{#% for item in variables_clientes %#}
								<div id="i_{#{item.variable.nombre}#}" ></div>
							{#% endfor %#}					
							</div>
					</div-->             
				</div><!--/span-->
			</div>
		</div>
{% endblock %}

{% block customstyles %}
div.dataTables_scroll { 
	clear: both !important; 
	}

table body tr{ 
	height: 2em !important;
} 	
	
td{
	text-align: center !important;
	font-size: .6em !important;
	padding: 0em !important;
}

th{
	font-size: .6em !important;
	text-align: center !important;
	// padding: 0em !important;
}
	
.head{
	text-align: left !important;
}	

span.indenter{
	padding-left:0em !important;
}

.tag{
	text-align: left !important;
}

/* Block out what is behind the fixed column's header and footer */
table.DTFC_Cloned thead,
table.DTFC_Cloned tfoot {
	background-color: white !important;
}

/* Block out the gap above the scrollbar on the right, when there is a fixed
 * right column
 */
div.DTFC_Blocker {
	background-color: white !important;
}

{% endblock %}

{% block stylesheets %}
<link href="{{ asset('bundles/cademreporte/css/demo_table.css') }}" rel="stylesheet">			
<link href="{{ asset('bundles/cademreporte/css/jquery.dataTables_themeroller.css') }}" rel="stylesheet">
<link href="{{ asset('bundles/cademreporte/css/redmond/jquery-ui.min.css') }}" rel="stylesheet">
{% endblock %}

{% block javascripts %}

<script src="{{ asset('bundles/cademreporte/js/jquery.dataTables.min.js') }}"></script>
<script src="{{ asset('bundles/cademreporte/js/dataTables.fixedColumns.js') }}"></script>

<script>
{#% for item in variables_clientes %#}
{#{"var i_"~item.variable.nombre~";"}#}
{#% endfor %#}

var oTable;
var maxWidth={{max_width}};
var maxHeight;
var DatosAdicionales = [];
var matriz_totales = [];
var max_largo_cadena = 0;

function calcularAnchoMaximo()
{
	// Calcula el ancho máximo de la tabla		
	$('table').css('max-width',maxWidth+'%');
	maxHeight=400;
	// alert('maxWidth='+maxWidth);
}

function construirTabla()
{
	oTable = $('#tabla_resumen').dataTable({
		"bProcessing": true,
		"bServerSide": true,
		"sAjaxSource": "{{ path('evolucion_body') }}",
		"fnServerData": function ( sSource, aoData, fnCallback ) {
			//AGREGAMOS LOS DATOS SOLO SI HAY
			if (DatosAdicionales.length > 0) for(i in DatosAdicionales) aoData.push(DatosAdicionales[i]);
			$.ajax( {
				"dataType": 'json', 
				"type": "GET", 
				"url": sSource, 
				"data": aoData, 
				"success": function(data){
							matriz_totales=data.matriz_totales;	
							maxWidth=parseInt(data.max_width);							
							max_largo_cadena=parseInt(data.max_largo_cadena);			
							fnCallback(data);
							DatosAdicionales = [];//AL FINAL SE BORRAN
						}
			} )
			.done(function() {  })
			.fail(function() {  })
			.always(function() { quitarloader(); });
		},	
		"sScrollY": maxHeight+'px',
		"sScrollX": "100%",
 		"sScrollXInner": maxWidth+'%',
 		"bScrollCollapse": true,
		"bFilter": false,
		"bSort": false,
		"bInfo": false,
		"bPaginate": false,
		"bJQueryUI": true,
		"bAutoWidth": true, 
		"aoColumnDefs": [
			{ "bVisible": false, "aTargets": [1] },	
			{ "sClass": "tag", "aTargets": [0], "sWidth": "12%" }				
		],
		"fnRowCallback": function( nRow, aData, iDisplayIndex, iDisplayIndexFull ) {	
			// str.replace(/\\n/g, '<br />');
			if(aData[0].length>40)
				$(nRow).children(':eq(0)').text(aData[0].substring(0,40).replace(/ /g,'_')+'...');
			else
				$(nRow).children(':eq(0)').text(aData[0].replace(/ /g,'_'));
			// $(nRow).children(':eq(0)').text(aData[0].replace(/ /g,''));		  
			$(nRow).attr('title',aData[0]);		  
		},			
		"aaSortingFixed": [[ 1, 'asc' ]],
		"fnInitComplete": function() {
			  fixedColumn();
			},
		"bDeferRender": true,
		"bSortClasses": false,
		"bInfo": true
		// "sDom": "frtiS",
	//	"sDom": '<"H"Cfr>t<"F"ip>',	
	});
	$('div.fg-toolbar:first').append("<h5 style='float:left;margin:0em'>Tabla Resumen Quiebre: (%) de Quiebre Categoria/Cadena</h5>");
}

function fixedColumn()
{				
		new FixedColumns( oTable, {
		// "sLeftWidth": "relative",
		// "iLeftWidth": 10, // percentage
		"sHeightMatch": "none",
		"fnDrawCallback": function ( left, right ) {
			/////////////////////////// Esta parte añade las filas de agregacion a la tabla //////////////////////////////////
			var oSettings = oTable.fnSettings();
			if ( oSettings.aiDisplay.length === 0 )
			{
				return;
			}
			var nGroup, nCell, iIndex, sGroup;
			var sLastGroup = "", iCorrector=0;
			var nTrs = $('#tabla_resumen tbody tr');
			// var iColspan = nTrs[0].getElementsByTagName('td').length;
            var cols=oTable.fnSettings().aoColumns.length-2;
			var row=0;
			
			for ( var i=0 ; i<nTrs.length ; ++i )
			{
				iIndex = oSettings._iDisplayStart + i;

				sGroup = oSettings.aoData[ oSettings.aiDisplay[iIndex] ]._aData[1];
				
				if ( sGroup != sLastGroup )
				{
              		var nGroup = document.createElement('tr');
					// Se agrgega una columna correspondiente a la columna oculta
					var nCells= new Array();   
					var nCell;
					nCell = document.createElement( 'td' );						 
					nCell.className = "group";																									
					nCell.innerHTML = 0;															
					nGroup.appendChild( nCell ); 					
					
                    for(var j=0 ; j< cols ; ++j)
					{
						nCells[j] = document.createElement( 'td' );						 
						nCells[j].className = "group";																				
						// alert(matriz_totales[row][j]);
						nCells[j].innerHTML = matriz_totales[row][j];																
						nGroup.appendChild( nCells[j] );						 
					}
					++row;
                    nTrs[i].parentNode.insertBefore( nGroup, nTrs[i] );
					// Se crea atributo que asocie la fila de agregacion con sus filas hijas
					var att=document.createAttribute("data-tt-id");
					att.value=sGroup;
					// Se añade fila de agregacion para tabla principal
					nTrs[i].previousSibling.setAttributeNode(att);			
                    
					// /* Cell to insert into the frozen columns */
					
                    nGroup = document.createElement( 'tr' );
					nCell = document.createElement( 'td' );
					nCell.className = "group tag";
					nCell.innerHTML = sGroup;
					nGroup.appendChild( nCell );
                    // Se añade fila de agregacion para tabla fija
					$(nGroup).insertBefore( $('tbody tr:eq('+(i+iCorrector)+')', left.body)[0] );
					
					iCorrector++;
					sLastGroup = sGroup;
				}
			}
		}
	});
}

$(document).ready(function () {

	var callbacks = $.Callbacks();

	callbacks.add( calcularAnchoMaximo() );
	alert(maxWidth);
	callbacks.add( construirTabla() );
	// callbacks.add( fixedColumn() );	
		
	$('#tabla_resumen_wrapper tr th').click(function() {
		var label= $(this).text().trim();
		$('.ui-state-active').removeClass();
		$(this).addClass('ui-state-active');
		$(".row_selected").removeClass("row_selected");
		
		// $.get( "{{ path('resumen_evolutivo') }}", $(this).text().trim(), function(data) {	
			// {#% for item in variables_clientes %#}
				// {#% if loop.index == 1 %#}
					// {#{"i_"~item.variable.nombre}#}.series[0].setData(data); 
					// {#{"i_"~item.variable.nombre}#}.setTitle({ text: "Evolucion Quiebre '"+label +"'"});
				// {#% endif %#}
			// {#% endfor %#}  					
		// });	
	});
		
	//GUARDA QUE BOTON SE PRESIONA EN EL FORMULARIO
	var $boton_presionado;
	$('form#filtros input').click(function() {
		$boton_presionado = $(this);
	});
	
	//LOGICA DEL SUBMIT DEL FORMULARIO, SE DEBERIA OCUPAR AJAX
	$('form#filtros').submit(function() {
		if($boton_presionado.attr("value") === "Limpiar Filtros"){
			$('form#filtros select[multiple="multiple"] option').prop('selected',true);
			$('#f_region_Region').change();
		}
		else procesarform(); //SE PROCESA FORMULARIO
		return false;
	});
		
	//REGION
	$(document).on('change', '#f_region_Region', function(){
		//RECARGAR PROVINCIA
		var datos = $(this).serialize();
		$('#f_provincia_Provincia').before('<img class="loader" alt="" style="float:right" src="/bundles/cademreporte/images/loader.gif">');
		$.get( "{{ path('helper_filtro_region') }}", datos, function(data) {
			$('#f_provincia').html(data);
		},'html')
		.done(function() {quitarloader(); $('#f_provincia_Provincia').change();})
		.fail(function() { alert("Se produjo un error al cargar las provincias");quitarloader();})
		.always(function() { /*alert("finished");*/});
	});
	
	//PROVINCIA
	$(document).on('change', '#f_provincia_Provincia', function(){
		//RECARGAR COMUNA
		var datos = $(this).serialize();
		$('#f_comuna_Comuna').before('<img class="loader" alt="" style="float:right" src="/bundles/cademreporte/images/loader.gif">');
		$.get( "{{ path('helper_filtro_provincia') }}", datos, function(data) {
			$('#f_comuna').html(data);
		},'html')
		.done(function() { /*alert("second success");*/ })
		.fail(function() { alert("Se produjo un error al cargar las comunas"); })
		.always(function() { /*alert("finished");*/ quitarloader();});
	});
});

	//LOGICA DEL SUBMIT DEL FORMULARIO, SE DEBERIA OCUPAR AJAX
	function procesarform(){
	
		//LOADER
		$('form#filtros input').last().after('<img class="loader" alt="" style="float:right" src="/bundles/cademreporte/images/loader.gif">');
		//GET
		//PROCESO
		alert('aca se hace request get/post');
		//AL FINALIZAR
		quitarloader();
	}

	function quitarloader(){
		if($('.loader').length > 0) $('.loader').remove();
	}

//LOGICA DEL SUBMIT DEL FORMULARIO, SE DEBERIA OCUPAR AJAX
	function procesarform(){
		//SE CLONA FORM Y SE ARREGLA LOS ITEM SELECCIONADOS POR USUARIO
		var cform = $('form#filtros').clone();
		cform.find('option').removeAttr("selected");
		var originform = $('form#filtros option');
		originform.each(function(i) {
			if($(this).is(':selected')) cform.find('option').eq(i).attr("selected", true);
		});
		//SE QUITA REGION Y COMUNA
		cform.find('#f_region').remove();
		cform.find('#f_provincia').remove();
		cform.find('input').remove();
		
		var dataform = cform.serializeArray();
		
		DatosAdicionales = dataform;
		$('form#filtros input').last().after('<img class="loader" alt="" style="float:right" src="/bundles/cademreporte/images/loader.gif">');
		recargarTabla();
		// oTable.fnDraw();//SI NO FUNCIONA ESTO USAR LA DE ABAJO
		// oTable.fnReloadAjax();
	}
	
	function recargarTabla()
	{		
		$.get("{{ path('evolucion_header') }}",DatosAdicionales,function(data){			
			maxWidth=parseInt(data.max_width);
			// Primero destruimos la tabla si existe (la removemos del DOM)	
			var ex = document.getElementById('tabla_resumen');
			if ( $.fn.DataTable.fnIsDataTable( ex ) ) {
			  oTable.fnDestroy(true);
			}			
			// Luego generamos el html de la tabla y lo añadimos al DOM
			var table= document.createElement( 'table' );
			var thead= document.createElement( 'thead' );
			var att=document.createAttribute("id");
			att.value="tabla_resumen";					
			table.setAttributeNode(att);
			var att=document.createAttribute("class");
			att.value="tabla_resumen table table-bordered display";					
			table.setAttributeNode(att);			
			var tableHead = document.createElement( 'tr' );	 //tableheader 							
			$(data.head).each(function(key,value){				
				var tableHeading = document.createElement( 'th' );					
				tableHeading.innerHTML = value.replace(/ /g,'');												
				tableHead.appendChild( tableHeading );				
			});						
			table.appendChild( tableHead );	
			thead.appendChild( tableHead );
			table.appendChild( thead );						
			document.getElementById('container').appendChild(table);			
			// Luego recalculamos el ancho maximo en base a la cardinalidad del head
			calcularAnchoMaximo();			
			// Luego volvemos a construir la tabla con dataTables
			construirTabla();
		},"json")
	}
	
	function quitarloader(){
		if($('.loader').length > 0) $('.loader').remove();
	}
				
	function cargartooltip(){
		$.each(periodo.data, function(index, value) {
			$('div#i_quiebre tspan:contains("'+value+'")').attr('title', periodo.tooltip[index])
			.tooltip({
				track: true
			});
		});	
	}		
	
	$.fn.dataTableExt.oApi.fnReloadAjax = function ( oSettings, sNewSource, fnCallback, bStandingRedraw )
	{
    if ( sNewSource !== undefined && sNewSource !== null ) {
        oSettings.sAjaxSource = sNewSource;
    }
 
    // Server-side processing should just call fnDraw
    if ( oSettings.oFeatures.bServerSide ) {
        this.fnDraw();
        return;
    }
 
    this.oApi._fnProcessingDisplay( oSettings, true );
    var that = this;
    var iStart = oSettings._iDisplayStart;
    var aData = [];
 
    this.oApi._fnServerParams( oSettings, aData );
 
    oSettings.fnServerData.call( oSettings.oInstance, oSettings.sAjaxSource, aData, function(json) {
        /* Clear the old information from the table */
        that.oApi._fnClearTable( oSettings );
 
        /* Got the data - add it to the table */
        var aData =  (oSettings.sAjaxDataProp !== "") ?
            that.oApi._fnGetObjectDataFn( oSettings.sAjaxDataProp )( json ) : json;
 
        for ( var i=0 ; i<aData.length ; i++ )
        {
            that.oApi._fnAddData( oSettings, aData[i] );
        }
         
        oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();
 
        that.fnDraw();
 
        if ( bStandingRedraw === true )
        {
            oSettings._iDisplayStart = iStart;
            that.oApi._fnCalculateEnd( oSettings );
            that.fnDraw( false );
        }
 
        that.oApi._fnProcessingDisplay( oSettings, false );
 
        /* Callback user function - for event handlers etc */
        if ( typeof fnCallback == 'function' && fnCallback !== null )
        {
            fnCallback( oSettings );
        }
    }, oSettings );
};			
	
 </script>
{% endblock %}